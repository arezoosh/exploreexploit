function varargout = bandit(varargin)
% BANDIT MATLAB code for bandit.fig
%      BANDIT, by itself, creates a new BANDIT or raises the existing
%      singleton*.
%
%      H = BANDIT returns the handle to a new BANDIT or the handle to
%      the existing singleton*.
%
%      BANDIT('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in BANDIT.M with the given input arguments.
%
%      BANDIT('Property','Value',...) creates a new BANDIT or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before bandit_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to bandit_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help bandit

% Last Modified by GUIDE v2.5 01-Jul-2020 08:12:05

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @bandit_OpeningFcn, ...
                   'gui_OutputFcn',  @bandit_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before bandit is made visible.
function bandit_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to bandit (see VARARGIN)
oldhandles = getappdata (0,'handlesall');
% prompt = {'Please enter your Code here:','Your age:','Your gender:'};
% dlgtitle = 'Input';
% dims = [1 75];
% definput = {'0220','25','W'};
handles.answer = oldhandles.answer;
caption = strcat('bandit2_',char(handles.answer(1)))
set(gcf, 'units','normalized','outerposition',[0 0 1 1]);
%[handles.mousename,handles.mousepath] = uiputfile(strcat('bandit_mouse',caption,'.txt')) ;
handles.mousename = strcat('bandit_mouse',caption,'.txt');
handles.dataname = strcat('bandit_choice_',caption,'.txt');
% handles.eyename = strcat(char(handles.answer(1)),'.EDF');
% handles.edfFile = handles.eyename;
% % % %% making eye tracking ready
% % % handles.screensize = get(0, 'screensize')
% % % dummymode=0;
% % % screenNumber=max(Screen('Screens'));
% % % [window, wRect]=Screen('OpenWindow', screenNumber, 100,[],32,2);
% % % el=EyelinkInitDefaults(window);
% % %     if ~EyelinkInit(dummymode)
% % %         fprintf('Eyelink Init aborted.\n');
% % %         cleanup;  % cleanup function
% % %         return;
% % %     end
% % % 
% % %     % the following code is used to check the version of the eye tracker
% % %     % and version of the host software
% % %     sw_version = 0;
% % % 
% % %     [v vs]=Eyelink('GetTrackerVersion');
% % %     fprintf('Running experiment on a ''%s'' tracker.\n', vs );
% % % 
% % %     % open file to record data to
% % %     i = Eyelink('Openfile', handles.edfFile);
% % %     if i~=0
% % %         fprintf('Cannot create EDF file ''%s'' ', handles.edfFile);
% % %         Eyelink( 'Shutdown');
% % %         Screen('CloseAll');
% % %         return;
% % %     end
% % %         Eyelink('command', 'add_file_preamble_text ''Recorded by EyelinkToolbox bandit-experiment''');
% % %     [width, height]=Screen('WindowSize', screenNumber);
% % %     Eyelink('command','screen_pixel_coords = %ld %ld %ld %ld', 0, 0, width-1, height-1);
% % %     Eyelink('message', 'DISPLAY_COORDS %ld %ld %ld %ld', 0, 0, width-1, height-1);                
% % %     % set calibration type.
% % %     Eyelink('command', 'calibration_type = HV13');
% % %         % set EDF file contents using the file_sample_data and
% % %     % file-event_filter commands
% % %     % set link data thtough link_sample_data and link_event_filter
% % %     Eyelink('command', 'file_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,INPUT');
% % %     Eyelink('command', 'link_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,INPUT');
% % % 
% % %     % check the software version
% % %     % add "HTARGET" to record possible target data for EyeLink Remote
% % %     if sw_version >=4
% % %         Eyelink('command', 'file_sample_data  = LEFT,RIGHT,GAZE,HREF,AREA,HTARGET,GAZERES,STATUS,INPUT');
% % %         Eyelink('command', 'link_sample_data  = LEFT,RIGHT,GAZE,GAZERES,AREA,HTARGET,STATUS,INPUT');
% % %     else
% % %         Eyelink('command', 'file_sample_data  = LEFT,RIGHT,GAZE,HREF,AREA,GAZERES,STATUS,INPUT');
% % %         Eyelink('command', 'link_sample_data  = LEFT,RIGHT,GAZE,GAZERES,AREA,STATUS,INPUT');
% % %     end
% % % 
% % %     % allow to use the big button on the eyelink gamepad to accept the 
% % %     % calibration/drift correction target
% % %     Eyelink('command', 'button_function 5 "accept_target_fixation"');
% % %    
% % %     
% % %     % make sure we're still connected.
% % %     if Eyelink('IsConnected')~=1 && dummymode == 0
% % %         fprintf('not connected, clean up\n');
% % %         Eyelink( 'Shutdown');
% % %         Screen('CloseAll');
% % %         return;
% % %     end
% % %      % STEP 6
% % %     % Calibrate the eye tracker
% % %     % setup the proper calibration foreground and background colors
% % %     el.backgroundcolour = [128 128 128];
% % %     el.calibrationtargetcolour = [0 0 0];
% % % 
% % %     % parameters are in frequency, volume, and duration
% % %     % set the second value in each line to 0 to turn off the sound
% % %     el.cal_target_beep=[600 0.5 0.05];
% % %     el.drift_correction_target_beep=[600 0.5 0.05];
% % %     el.calibration_failed_beep=[400 0.5 0.25];
% % %     el.calibration_success_beep=[800 0.5 0.25];
% % %     el.drift_correction_failed_beep=[400 0.5 0.25];
% % %     el.drift_correction_success_beep=[800 0.5 0.25];
% % %     % you must call this function to apply the changes from above
% % %      
% % %     EyelinkUpdateDefaults(el);
% % % 
% % %     % Hide the mouse cursor;
% % %     Screen('HideCursorHelper', window);
% % %     EyelinkDoTrackerSetup(el);
% % % 
%handles.screensize = get(0, 'screensize')
%SetMouse(handles.screensize(3)/2,handles.screensize(4)/2)
SetMouse(handles.screensize(3)/2,handles.screensize(4)/2)
handles.noclick=0;
handles.outA = 7900;
trialno = handles.oldhandles.trialno;
handles.trialno = handles.oldhandles.trialno;
good_percentage = 70/100;
goodout = 15800;
% length of good and bad arrays (100)
arrlen = 100;
good_no = good_percentage * arrlen;
bad_no = int16((1 - good_percentage) * arrlen);
ag = zeros(1,arrlen);
ag(randperm(numel(ag), good_no)) = goodout;
agood = ag;
ab = zeros(1,arrlen);
ab(randperm(numel(ab), bad_no)) = goodout;
abad = ab;

%selection from arrays trialno times with replacement
for i= 1: trialno
    
    tmp = randi([0 1]);
    idx=randperm(length(agood),1);
    if (tmp)   
    % good draw
        outB(i) = agood(idx);
        %uncomment this if you want to select without replacement
        %agood(idx) = []
    else
    % bad draw
        outB(i) = abad(idx);
        %uncomment this if you want to select without replacement
       % abad(idx) = []
    end
end
handles.outB = outB;


% Choose default command line output for bandit
handles.output = hObject;
    %% start recording
    Eyelink('Message','Bandit started')
Eyelink('Message', 'TRIALID %d', handles.noclick);
% Eyelink('Command', 'set_idle_mode');
% uncheck this if screen is dark
% Screen('Close', window);
%or
%Screen('Flip', window);
        % clear tracker display and draw box at center
 WaitSecs(0.05);
 Eyelink('StartRecording');
 WaitSecs(0.1);
tic;
handles.tmr = timer('ExecutionMode', 'FixedRate', ...
    'Period', .1, ...
    'TimerFcn', {@mousetimer,handles.mousename,hObject});
start(handles.tmr)
% Update handles structure
guidata(hObject, handles);

% UIWAIT makes bandit wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = bandit_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in pushbuttonA.
function pushbuttonA_Callback(hObject, eventdata, handles)
% hObject    handle to pushbuttonA (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
Eyelink('Message','Button A pressed')
set(handles.pushbuttonA,'Enable','off')
set(handles.pushbuttonB,'Enable','off')
guidata(hObject, handles)
handles.noclick=handles.noclick + 1;
handles.explre(handles.noclick)= 0;
handles.outA = 7900;
handles.timesel(handles.noclick)=toc;
set(handles.pushbuttonA,'String',handles.outA)
handles.score(handles.noclick)=handles.outA;
saveddata = [handles.explre(handles.noclick),handles.outA,handles.timesel(handles.noclick),handles.noclick];
dlmwrite(strcat(handles.dataname),saveddata,'precision','%.6f','-append','newline', 'pc');
pause(1)
set(handles.pushbuttonA,'String','A')
SetMouse(handles.screensize(3)/2,handles.screensize(4)/2)
set(handles.pushbuttonA,'Enable','on')
set(handles.pushbuttonB,'Enable','on')
set
guidata(hObject, handles)
if handles.noclick == handles.trialno 
    listOfTimers = timerfindall
    if ~isempty(listOfTimers)
        stop(listOfTimers(:));
        delete(listOfTimers(:));
    end
    caption = strcat('bandit_data2_',char(handles.answer(1)))

   f = msgbox(strcat('Task 2 is finished Your score is :',int2str(sum(handles.score))));    
   pause(5)
   %dlmwrite([handles.datapath,handles.dataname],caption,'precision','%.6f','-append','newline', 'pc');
    %save(caption)
   a1 = sum(oldhandles.score);
   a2 = sum(handles.score);
   handles.finala = datasample([a1,a2],1);
   handles.pay = ceil((0.05/160)*handles.finala)+45;
       assignin('base',caption , handles)
   f = msgbox(strcat('Your final score is :',int2str(handles.pay)));    
   pause(5)
        % adds 100 msec of data to catch final events
        WaitSecs(0.1);
        % stop the recording of eye-movements for the current trial
        Eyelink('StopRecording');
        Eyelink('Command', 'set_idle_mode');
        WaitSecs(0.5);
        Eyelink('CloseFile');
        Eyelink('ShutDown');
        Screen('CloseAll');
        close all force
 end





% --- Executes on button press in pushbuttonB.
function pushbuttonB_Callback(hObject, eventdata, handles)
% hObject    handle to pushbuttonB (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
%stop(handles.tmr)
Eyelink('Message','Button B pressed')
set(handles.pushbuttonA,'Enable','off')
set(handles.pushbuttonB,'Enable','off')
guidata(hObject, handles)
handles.noclick=handles.noclick + 1;
handles.timesel(handles.noclick)=toc;
handles.explre(handles.noclick)= 1;
outB = handles.outB(handles.noclick)
set(handles.pushbuttonB,'String',outB)
handles.score(handles.noclick)=outB
saveddata = [handles.explre(handles.noclick),outB,handles.timesel(handles.noclick),handles.noclick];
dlmwrite(strcat(handles.dataname),saveddata,'precision','%.6f','-append','newline', 'pc');
 pause(1)
set(handles.pushbuttonB,'String','B')
%SetMouse(handles.screensize(3)/2,handles.screensize(4)/2)
SetMouse(handles.screensize(3)/2,handles.screensize(4)/2)
%start(handles.tmr)
set(handles.pushbuttonA,'Enable','on')
set(handles.pushbuttonB,'Enable','on')
guidata(hObject, handles)
if handles.noclick == handles.trialno 
    listOfTimers = timerfindall
    if ~isempty(listOfTimers)
        delete(listOfTimers(:));
    end
    caption = strcat('bandit_data2_',char(handles.answer(1)))
   f = msgbox(strcat('Task 2 is finished. Your score is :',int2str(sum(handles.score))));    
   pause(5)
   a1 = sum(oldhandles.score);
   a2 = sum(handles.score);
   handles.finala = datasample([a1,a2],1);
   handles.pay = ceil((0.05/160)*handles.finala)+45;
    assignin('base',caption , handles)
   f = msgbox(strcat('Your final score is :',int2str(handles.pay)));    
   pause(5)
   %save(caption)
           % adds 100 msec of data to catch final events
        WaitSecs(0.1);
        % stop the recording of eye-movements for the current trial
        Eyelink('StopRecording');
        Eyelink('Command', 'set_idle_mode');
        WaitSecs(0.5);
        Eyelink('CloseFile');
        Eyelink('ShutDown');
        Screen('CloseAll');
        close all force
end     

function mousetimer (object, eventdata,namemouse,addressmouse,hObject)

[x,y] = GetMouse();
pose =[x,y];
%handles.pose(handles.noclick+1,:) =pose;
timepose=toc;
%         %%%%%%%%         
%          [x,y,buttons]=GetMouse(); 
% %         if buttons ==[0 0 0]
d=[pose,timepose];     
%dlmwrite([addressmouse,namemouse],d,'precision','%.6f','-append','newline', 'pc');
dlmwrite(namemouse,d,'precision','%.6f','-append','newline', 'pc');
% --------------------------------------------------------------------
function Untitled_1_Callback(hObject, eventdata, handles)
% hObject    handle to Untitled_1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on mouse motion over figure - except title and menu.
% function figure1_WindowButtonMotionFcn(hObject, eventdata, handles)
% % hObject    handle to figure1 (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    structure with handles and user data (see GUIDATA)
% 
%     [mousex,mousey] = GetMouse();
%     pose = [mousex,mousey];
%    dlmwrite([handles.mousename,handles.mousepath],pose,'precision','%.6f','-append','newline', 'pc');
%     pause(0.1); %// Pause for 0.01 ms
