function varargout = visual(varargin)
% VISUAL MATLAB code for visual.fig
%      VISUAL, by itself, creates a new VISUAL or raises the existing
%      singleton*.
%
%      H = VISUAL returns the handle to a new VISUAL or the handle to
%      the existing singleton*.
%
%      VISUAL('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in VISUAL.M with the given input arguments.
%
%      VISUAL('Property','Value',...) creates a new VISUAL or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before visual_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to visual_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help visual

% Last Modified by GUIDE v2.5 09-Jul-2020 15:12:23

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @visual_OpeningFcn, ...
                   'gui_OutputFcn',  @visual_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before visual is made visible.
function visual_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to visual (see VARARGIN)
handles.screensize = get(0, 'screensize')
handles.decpoint = 10;
handles.dectime = 10;
handles.finishtime = 30;
handles.trialno = 5;
prompt = {'Please enter your Code here:','Your age:','Your gender:'};
dlgtitle = 'Input';
dims = [1 75];
definput = {'0220','25','W'};
handles.answer = inputdlg(prompt,dlgtitle,dims,definput);
caption = strcat('data1_',char(handles.answer(1)));
set(gcf, 'units','normalized','outerposition',[0 0 1 1]);
%[handles.mousename,handles.mousepath] = uiputfile(strcat('mouse_',caption,'.txt')) ;
handles.mousename = strcat('visual_mouse_',caption,'.txt');
handles.dataname = strcat('visual_choice_',caption,'.txt');
handles.eyename = strcat(char(handles.answer(1)),'.EDF');
handles.edfFile = handles.eyename;
%% eye tracking screen
dummymode=0;
screenNumber=max(Screen('Screens'));
[window, wRect]=Screen('OpenWindow', screenNumber, 100,[],32,2);
el=EyelinkInitDefaults(window);
    if ~EyelinkInit(dummymode)
        fprintf('Eyelink Init aborted.\n');
        cleanup;  % cleanup function
        return;
    end

    % the following code is used to check the version of the eye tracker
    % and version of the host software
    sw_version = 0;

    [v vs]=Eyelink('GetTrackerVersion');
    fprintf('Running experiment on a ''%s'' tracker.\n', vs );

    % open file to record data to
    i = Eyelink('Openfile', handles.edfFile);
    if i~=0
        fprintf('Cannot create EDF file ''%s'' ', handles.edfFile);
        Eyelink( 'Shutdown');
        Screen('CloseAll');
        return;
    end
        Eyelink('command', 'add_file_preamble_text ''Recorded by EyelinkToolbox visual-experiment''');
    [width, height]=Screen('WindowSize', screenNumber);
     Eyelink('command','screen_pixel_coords = %ld %ld %ld %ld', 0, 0, width-1, height-1);
    Eyelink('message', 'DISPLAY_COORDS %ld %ld %ld %ld', 0, 0, width-1, height-1);                
    % set calibration type.
    Eyelink('command', 'calibration_type = HV13');
        % set EDF file contents using the file_sample_data and
    % file-event_filter commands
    % set link data thtough link_sample_data and link_event_filter
    Eyelink('command', 'file_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,INPUT');
    Eyelink('command', 'link_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,INPUT');

    % check the software version
    % add "HTARGET" to record possible target data for EyeLink Remote
    if sw_version >=4
        Eyelink('command', 'file_sample_data  = LEFT,RIGHT,GAZE,HREF,AREA,HTARGET,GAZERES,STATUS,INPUT');
        Eyelink('command', 'link_sample_data  = LEFT,RIGHT,GAZE,GAZERES,AREA,HTARGET,STATUS,INPUT');
    else
        Eyelink('command', 'file_sample_data  = LEFT,RIGHT,GAZE,HREF,AREA,GAZERES,STATUS,INPUT');
        Eyelink('command', 'link_sample_data  = LEFT,RIGHT,GAZE,GAZERES,AREA,STATUS,INPUT');
    end

    % allow to use the big button on the eyelink gamepad to accept the 
    % calibration/drift correction target
    Eyelink('command', 'button_function 5 "accept_target_fixation"');
   
    
    % make sure we're still connected.
    if Eyelink('IsConnected')~=1 && dummymode == 0
        fprintf('not connected, clean up\n');
        Eyelink( 'Shutdown');
        Screen('CloseAll');
        return;
    end
     % STEP 6
    % Calibrate the eye tracker
    % setup the proper calibration foreground and background colors
    el.backgroundcolour = [128 128 128];
    el.calibrationtargetcolour = [0 0 0];

    % parameters are in frequency, volume, and duration
    % set the second value in each line to 0 to turn off the sound
    el.cal_target_beep=[600 0.5 0.05];
    el.drift_correction_target_beep=[600 0.5 0.05];
    el.calibration_failed_beep=[400 0.5 0.25];
    el.calibration_success_beep=[800 0.5 0.25];
    el.drift_correction_failed_beep=[400 0.5 0.25];
    el.drift_correction_success_beep=[800 0.5 0.25];
    % you must call this function to apply the changes from above
    EyelinkUpdateDefaults(el);

    % Hide the mouse cursor;
    Screen('HideCursorHelper', window);
    EyelinkDoTrackerSetup(el);
%% % making numbers
handles.numberoption = 132;
highpercent = 10/100;
lowpercent = 90/100;
handles.nohigh = round(highpercent * handles.numberoption);
handles.nolow = round(lowpercent * handles.numberoption);
lowrange = datasample(1001:1300,handles.nolow,'Replace',false);
highrange = datasample(16501:16800,handles.nohigh,'Replace',false);
handles.values = datasample([lowrange,highrange],handles.numberoption);
guidata(hObject, handles)
handles.fixed = datasample(1350:1650,1,'Replace',false);
set(handles.fixedbutton,'String',strcat('00',int2str(handles.fixed)))
for i=1:handles.numberoption
    tmphandles = (strcat('handles.pushbutton',int2str(i)));
    set(eval(tmphandles),'String',strcat('00',int2str(handles.values(i))));
end

%% %
%[handles.dataname,handles.datapath] = uiputfile(strcat('data_',caption,'.txt'))
handles.noclick=0;
    %% start recording
Eyelink('Message','Visual started')
Eyelink('Message', 'TRIALID %d', handles.noclick);
Eyelink('Command', 'set_idle_mode');
        % clear tracker display and draw box at center
% uncheck this if screen is dark
Screen('Close', window);
%or
%Screen('Flip', window);
 WaitSecs(0.05);
 Eyelink('StartRecording');
 tic
 WaitSecs(0.1);
SetMouse(handles.screensize(3)/2,handles.screensize(4)/2)
handles.tmr = timer('ExecutionMode', 'FixedRate', ...
    'Period', .1, ...
    'TimerFcn', {@mousetimer,handles.mousename,hObject});

start(handles.tmr)
guidata(hObject, handles);
handles.samplingdectimer = timer('ExecutionMode', 'FixedRate', ...
                'Period', handles.dectime, ...
                'Tag','decrease',...
                'UserData',handles.noclick,...
                'TimerFcn', {@dectimer,handles,hObject});
             % Pre-allocate?!
start(handles.samplingdectimer);

handles.nextround = timer('ExecutionMode', 'FixedRate', ...
                'Period', handles.finishtime, ...
                'Tag','nextround',...
                'TimerFcn', {@roundtimer,handles,hObject});
             % Pre-allocate?!
start(handles.nextround);
% start(handles.tmrdec)
% % Choose default command line output for visual
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes visual wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = visual_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;
function selection(hObject, eventdata, namebutton, handles)

out = timerfind('Tag','decrease')
stop(out)
delete(out)
outnext = timerfind('Tag','nextround')
stop(outnext)
delete(outnext)
handles.noclick=handles.noclick + 1;
guidata(hObject, handles)
if handles.noclick == handles.trialno + 1
    setappdata(0,'handlesall',handles)
    listOfTimers = timerfindall
    if ~isempty(listOfTimers)
        stop(listOfTimers(:));
        delete(listOfTimers(:));
    end
    caption = strcat('visual_data1_',char(handles.answer(1)))
    assignin('base',caption , handles)
   f = msgbox(strcat('Task 1 is finished Your score is :',int2str(sum(handles.score))));    
   pause(5)
    WaitSecs(0.1);
        % stop the recording of eye-movements for the current trial
        Eyelink('StopRecording');
%         Eyelink('Command', 'set_idle_mode');
%         WaitSecs(0.5);
%         Eyelink('CloseFile');
%         Eyelink('ShutDown');
%         Screen('CloseAll');
        close all force
        bandit
return
end
handles.timesel(handles.noclick)=toc;

%% change for each button
a = namebutton.Tag;
if isempty(str2num(a(regexp(a,'\d'))))
    handles.button(handles.noclick)= 0;
    handles.explre(handles.noclick)= 0;
else
handles.button(handles.noclick) = str2num(a(regexp(a,'\d'))) ;
handles.explre(handles.noclick)= 1;
end
handles.score(handles.noclick) = str2num(namebutton.String);
Eyelink('Message',strcat('Button',handles.button(handles.noclick),' pressed'))
%%


for i=1:handles.numberoption
    tmphandles = (strcat('handles.pushbutton',int2str(i)));
    set(eval(tmphandles),'Enable','off');
end
 set(handles.fixedbutton,'Enable','off');
guidata(hObject, handles)

%handles.score(handles.noclick)=eval(tmphandles).
saveddata = [handles.explre(handles.noclick),handles.score(handles.noclick),handles.button(handles.noclick),handles.timesel(handles.noclick),handles.noclick];
 dlmwrite((handles.dataname),saveddata,'precision','%.6f','-append','newline', 'pc');
 pause(1)
 SetMouse(handles.screensize(3)/2,handles.screensize(4)/2)
 handles.samplingdectimer = timer('ExecutionMode', 'FixedRate', ...
                'Period', handles.dectime, ...
                'Tag','decrease',...
                'UserData',handles.noclick,...
                'TimerFcn', {@dectimer,handles,hObject});
             % Pre-allocate?!
start(handles.samplingdectimer);
handles.fixed = datasample(1350:1650,1,'Replace',false); 
lowrange = datasample(1001:1300,handles.nolow,'Replace',false);
highrange = datasample(16501:16800,handles.nohigh,'Replace',false);
handles.values = datasample([lowrange,highrange],handles.numberoption);



guidata(hObject, handles)

set(handles.fixedbutton,'String',strcat('00',int2str(handles.fixed)))
for i=1:handles.numberoption
    tmphandles = (strcat('handles.pushbutton',int2str(i)));
    set(eval(tmphandles),'String',strcat('00',int2str(handles.values(i))));
end
 
 for i=1:handles.numberoption
    tmphandles = (strcat('handles.pushbutton',int2str(i)));
    set(eval(tmphandles),'Enable','on');
 end
  set(handles.fixedbutton,'Enable','on');
 handles.nextround = timer('ExecutionMode', 'FixedRate', ...
                'Period', handles.finishtime, ...
                'Tag','nextround',...
                'TimerFcn', {@roundtimer,handles,hObject});
             % Pre-allocate?!
start(handles.nextround);
guidata(hObject, handles)

function mousetimer (obj, event,namemouse,hObject)

[x,y] = GetMouse();
pose =[x,y];
%handles.pose(handles.noclick+1,:) =pose;
timepose=toc;
%         %%%%%%%%         
%          [x,y,buttons]=GetMouse(); 
% %         if buttons ==[0 0 0]
d=[pose,timepose];     
%dlmwrite([addressmouse,namemouse],d,'precision','%.6f','-append','newline', 'pc');
dlmwrite((namemouse),d,'precision','%.6f','-append','newline', 'pc');

function dectimer(obj, event,handles,hObject)
guidata(hObject, handles)
currentvalue = str2double(get(handles.fixedbutton,'String'))
out = timerfind('Tag','decrease')
k = out.TasksExecuted
handles.fixed = currentvalue - (handles.decpoint * (k-1));
%handles.fixed = currentvalue - (handles.decpoint );
w=out.UserData
set(handles.fixedbutton,'String',strcat('00',int2str(handles.fixed)))
guidata(hObject, handles)

%noclk = (handles.noclick)
% val = handles.fixed
%   set(handles.fixedbutton,'String',int2str(val - (50 * k)))

  guidata(hObject, handles)
  
function roundtimer(obj, event,handles,hObject)
guidata(hObject, handles)
outn = timerfind('Tag','nextround')
k = outn.TasksExecuted
if k > 1 
out = timerfind('Tag','decrease')
stop(out)
delete(out)
handles.noclick=handles.noclick + 1;
guidata(hObject, handles)
handles.timesel(handles.noclick)=toc;
handles.explre(handles.noclick)= 1;
Eyelink('Message','Forcee choice of zero')
%% change for each button
handles.button(handles.noclick) = 222;
handles.score(handles.noclick) = 0;
%%
if handles.noclick == handles.trialno + 1
    listOfTimers = timerfindall
    if ~isempty(listOfTimers)
        stop(listOfTimers(:));
        delete(listOfTimers(:));
    end
    caption = strcat('visual_data1_',char(handles.answer(1)))
    assignin('base',caption , handles)
   f = msgbox(strcat('Task 1 is finished Your score is :',int2str(sum(handles.score))));    
   pause(5)
 WaitSecs(0.1);
        % stop the recording of eye-movements for the current trial
        Eyelink('StopRecording');
%         Eyelink('Command', 'set_idle_mode');
%         WaitSecs(0.5);
%         Eyelink('CloseFile');
%         Eyelink('ShutDown');
%         Screen('CloseAll');
        close all force
        bandit
return
end

for i=1:handles.numberoption
    tmphandles = (strcat('handles.pushbutton',int2str(i)));
    set(eval(tmphandles),'Enable','off');
end
 set(handles.fixedbutton,'Enable','off');
guidata(hObject, handles)

%handles.score(handles.noclick)=eval(tmphandles).
saveddata = [handles.explre(handles.noclick),handles.score(handles.noclick),handles.button(handles.noclick),handles.timesel(handles.noclick),handles.noclick];
 dlmwrite((handles.dataname),saveddata,'precision','%.6f','-append','newline', 'pc');
 pause(1)
 SetMouse(handles.screensize(3)/2,handles.screensize(4)/2)
handles.fixed = datasample(1350:1650,1,'Replace',false); 
lowrange = datasample(1001:1300,handles.nolow,'Replace',false);
highrange = datasample(16501:16800,handles.nohigh,'Replace',false);
handles.values = datasample([lowrange,highrange],handles.numberoption);
guidata(hObject, handles)
set(handles.fixedbutton,'String',strcat('00',int2str(handles.fixed)))
for i=1:handles.numberoption
    tmphandles = (strcat('handles.pushbutton',int2str(i)));
    set(eval(tmphandles),'String',strcat('00',int2str(handles.values(i))));
end
 for i=1:handles.numberoption
    tmphandles = (strcat('handles.pushbutton',int2str(i)));
    set(eval(tmphandles),'Enable','on');
 end
  set(handles.fixedbutton,'Enable','on');
guidata(hObject, handles)
 handles.samplingdectimer = timer('ExecutionMode', 'FixedRate', ...
                'Period', handles.dectime, ...
                'Tag','decrease',...
                'UserData',handles.noclick,...
                'TimerFcn', {@dectimer,handles,hObject});
             % Pre-allocate?!
start(handles.samplingdectimer);
guidata(hObject, handles)
end
function pushbutton1_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton1, handles)

function pushbutton2_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton2, handles)

function pushbutton3_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton3, handles)

function pushbutton4_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton4, handles)

function pushbutton5_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton5, handles)

function pushbutton6_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton6, handles)

function pushbutton7_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton7, handles)

function pushbutton8_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton8, handles)

function pushbutton9_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton9, handles)

function pushbutton10_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton10, handles)

function pushbutton11_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton11, handles)

function pushbutton12_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton12, handles)

function pushbutton13_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton13, handles)

function pushbutton14_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton14, handles)

function pushbutton15_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton15, handles)

function pushbutton16_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton16, handles)

function pushbutton17_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton17, handles)

function pushbutton18_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton18, handles)

function pushbutton19_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton19, handles)

function pushbutton20_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton20, handles)

function pushbutton21_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton21, handles)

function pushbutton22_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton22, handles)

function pushbutton23_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton23, handles)

function pushbutton24_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton24, handles)

function pushbutton25_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton25, handles)

function pushbutton26_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton26, handles)

function pushbutton27_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton27, handles)

function pushbutton28_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton28, handles)

function pushbutton29_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton29, handles)

function pushbutton30_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton30, handles)

function pushbutton31_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton31, handles)

function pushbutton32_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton32, handles)

function pushbutton33_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton33, handles)

function pushbutton34_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton34, handles)

function pushbutton35_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton35, handles)

function pushbutton36_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton36, handles)

function pushbutton37_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton37, handles)

function pushbutton38_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton38, handles)

function pushbutton39_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton39, handles)

function pushbutton40_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton40, handles)

function pushbutton41_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton41, handles)

function pushbutton42_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton42, handles)

function pushbutton43_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton43, handles)

function pushbutton44_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton44, handles)

function pushbutton45_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton45, handles)

function pushbutton46_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton46, handles)

function pushbutton47_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton47, handles)

function pushbutton48_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton48, handles)

function pushbutton49_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton49, handles)

function pushbutton50_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton50, handles)

function pushbutton51_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton51, handles)

function pushbutton52_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton52, handles)

function pushbutton53_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton53, handles)

function pushbutton54_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton54, handles)

function pushbutton55_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton55, handles)

function pushbutton56_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton56, handles)

function pushbutton57_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton57, handles)

function pushbutton58_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton58, handles)

function pushbutton59_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton59, handles)

function pushbutton60_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton60, handles)

function pushbutton61_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton61, handles)

function pushbutton62_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton62, handles)

function pushbutton63_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton63, handles)

function pushbutton64_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton64, handles)

function pushbutton65_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton65, handles)

function pushbutton66_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton66, handles)

function pushbutton67_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton67, handles)

function pushbutton68_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton68, handles)

function pushbutton69_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton69, handles)

function pushbutton70_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton70, handles)

function pushbutton71_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton71, handles)

function pushbutton72_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton72, handles)

function pushbutton73_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton73, handles)

function pushbutton74_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton74, handles)

function pushbutton75_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton75, handles)

function pushbutton76_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton76, handles)

function pushbutton77_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton77, handles)

function pushbutton78_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton78, handles)

function pushbutton79_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton79, handles)

function pushbutton80_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton80, handles)

function pushbutton81_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton81, handles)

function pushbutton82_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton82, handles)

function pushbutton83_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton83, handles)

function pushbutton84_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton84, handles)

function pushbutton85_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton85, handles)

function pushbutton86_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton86, handles)

function pushbutton87_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton87, handles)

function pushbutton88_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton88, handles)

function pushbutton89_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton89, handles)

function pushbutton90_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton90, handles)

function pushbutton91_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton91, handles)

function pushbutton92_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton92, handles)

function pushbutton93_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton93, handles)

function pushbutton94_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton94, handles)

function pushbutton95_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton95, handles)

function pushbutton96_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton96, handles)

function pushbutton97_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton97, handles)

function pushbutton98_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton98, handles)

function pushbutton99_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton99, handles)

function pushbutton100_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton100, handles)

function pushbutton101_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton101, handles)

function pushbutton102_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton102, handles)

function pushbutton103_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton103, handles)

function pushbutton104_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton104, handles)

function pushbutton105_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton105, handles)

function pushbutton106_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton106, handles)

function pushbutton107_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton107, handles)

function pushbutton108_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton108, handles)

function pushbutton109_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton109, handles)

function pushbutton110_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton110, handles)

function pushbutton111_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton111, handles)

function pushbutton112_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton112, handles)

function pushbutton113_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton113, handles)

function pushbutton114_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton114, handles)

function pushbutton115_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton115, handles)

function pushbutton116_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton116, handles)

function pushbutton117_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton117, handles)

function pushbutton118_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton118, handles)

function pushbutton119_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton119, handles)

function pushbutton120_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton120, handles)

function pushbutton121_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton121, handles)

function pushbutton122_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton122, handles)

function pushbutton123_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton123, handles)

function pushbutton124_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton124, handles)

function pushbutton125_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton125, handles)

function pushbutton126_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton126, handles)

function pushbutton127_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton127, handles)

function pushbutton128_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton128, handles)

function pushbutton129_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton129, handles)

function pushbutton130_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton130, handles)

function pushbutton131_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton131, handles)

function pushbutton132_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.pushbutton132, handles)

% --- Executes during object creation, after setting all properties.
function fixedbutton_Callback(hObject, eventdata, handles)
selection(hObject, eventdata, handles.fixedbutton, handles)

function fixedbutton_CreateFcn(hObject, eventdata, handles)
% hObject    handle to fixedbutton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% --- Executes when user attempts to close figure1.
function figure1_CloseRequestFcn(hObject, eventdata, handles)
% hObject    handle to figure1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
 listOfTimers = timerfindall
    if ~isempty(listOfTimers)
        stop(listOfTimers(:));
        delete(listOfTimers(:));
    end
     WaitSecs(0.1);
        % stop the recording of eye-movements for the current trial
        Eyelink('StopRecording');
        Eyelink('Command', 'set_idle_mode');
        WaitSecs(0.5);
        Eyelink('CloseFile');
        Eyelink('ShutDown');
        Screen('CloseAll');
        close all force
return
% Hint: delete(hObject) closes the figure
delete(hObject);
